IFT2035  TP2
Rapport


    L'utilisateur écrit une expression mathématique qui est envoyée à la fonction traiter, avec un dictionnaire contenant les variables initialisées. Nous utilisons la fonction tokenize pour transformer l'expression en une liste des termes qui y sont présents, sans les espaces. Chacun des "tokens" est une liste qui contient les caractères du terme qu'il représente: par exemple, "123 2 +" devient ( (#\1 #\2 #\3) (#\2) (#\+)). On veut ensuite traiter cette expression en utilisant une pile, comme pour le TP1. On veut passer à travers la liste de tokens et les ajouter à la pile un à un, en traitant les opérations au bon moment. Pour passer à travers la liste, on utilisera foldl. En effet, on veut commencer par traiter les opérations écrites en premier. Foldl a besoin de trois paramètres: une fonction, un terme de base et la liste sur laquelle on applique notre fonction (la liste "token".) Le terme de base doit être une structure qui contient à la fois la pile et le dictionnaire. On crée "state", une liste contenant deux éléments, la pile (vide au début de chaque analyse de ligne) et le dictionnaire. La fonction passée à foldl est process-token. Celle-ci utilise une fonction find avec continuation pour trouver la bonne fonction à appliquer pour gérer un certain terme. 
    On a défini une liste de couples de fonctions. Les couples contiennent d'abord une fonction booléenne qui teste le token. Ensuite, la deuxième fonction est celle qu'on doit utiliser pour ajouter le token à la pile. Lorsqu'on cherche dans cette liste de couples, on applique toujours la première fonction sur le token. Si le test réussit, la recherche se conclut et on applique la deuxième fonction du couple sur state et token.     

    Les fonctions qui appliquent les opérations des tokens sont add-token-to-pile, process-operator, process-set et process-ref. Elles gèrent respectivement les nombres, les opérateurs (* + -), les assignations de variables et les références à des variables. 
    La fonction add-token-to-pile ajoute le token, identifié comme étant un nombre, à la pile.
    La fonction process-operator commence par créer une variable locale func qui consiste en l'opérateur représenté par le token. On utilise donc un switch pour associer le caractère #\+ à l'opérateur +, par exemple. Ensuite, on dépile deux nombres de la pile pour effectuer notre fonction dessus. On empile ensuite le résultat sur la pile. 
    La fonction process-set modifie le dictionnaire de la pile en y ajoutant une association entre le nom de variable donné par le token et la première valeur de la pile. On effectue sur le dictionnaire un foldl qui construit un nouveau dictionnaire à partir de la nouvelle référence à ajouter. Le foldl passe à travers le vieux dictionnaire et compare les vieilles entrées à la nouvelle. Si les vieilles entrées réfèrent à des noms de variables différents, on retient la référence (on l'ajoute au nouveau dictionnaire). Quand on observe une variable avec le même nom, on passe par dessus pour pouvoir l'override avec la nouvelle valeur. 
    La fonction process-ref retrouve dans le dictionnaire la valeur de la variable identifiée par le token. Ceci se fait grâce à un find-cont. 


d) Affichage des résultats et des erreurs
    Pour l'affichage des résultats, on se sert de la méthode écrite par le professeur. On a remarqué qu'elle affichait les valeurs attachées en avant du dictionnaire retourné par "traiter". Donc pour afficher les résultats, on dépile simplement le premier nombre de la pile et on l'attache devant le dictionnaire avec "cons". De la même façon, pour afficher le message d'erreur, on l'append devant dict.  
    
e) Traitement des erreurs
    Le traitement des erreurs est simple. On applique le principe du try...catch. Notre méthode la plus englobante, traiter, utilise la fonction with-exception-catcher, qui "surveille" le lancer d'exceptions et effectue une fonction si elle attrape une exception. Dans ce cas ci, chaque exception qu'on lance au cours de l'exécution donne un message d'erreur. Dans le catch, on ajoute ce message devant le dictionnaire pour qu'il soit imprimé à la place de la pile. 
    Chaque fois qu'on fait une recherche avec continuation (find-cont), on précise aussi une fonction d'échec au cas où on arrive au bout de la liste sans trouver. Cette fonction lance le message d'erreur approprié au contexte avec "raise".
    On peut aussi avoir droit à des erreurs quand on a besoin de dépiler des nombres, quand vient temps d'effectuer une opération mathématique sur deux nombres ou d'attribuer une valeur à une variable. Dans les fonctions process-operator et process-set, on vérifie donc que la taille de la pile correspond à un certain minimum avant de dépiler. Sinon, on lance une exception de type "not enough arguments". 
     On lance aussi une exception dans Traiter au moment de renvoyer la pile et le dictionnaire. On vérifie si la pile contient plus qu'un élément. Dans ce cas, on a une erreur de syntaxe car on a donné trop d'arguments à l'expression. 
